#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Validating commit message..."

# L√™ a mensagem do commit
commit_msg=$(cat "$1")

# Regex para validar conventional commits
# Formato: type(scope?): description
# Tipos v√°lidos: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
commit_regex='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{3,}$'

if ! echo "$commit_msg" | grep -qE "$commit_regex"; then
  echo ""
  echo "‚ùå Invalid commit message format!"
  echo ""
  echo "üìù Commit message must follow Conventional Commits:"
  echo "   <type>[optional scope]: <description>"
  echo ""
  echo "Valid types:"
  echo "  feat:     A new feature"
  echo "  fix:      A bug fix"
  echo "  docs:     Documentation only changes"
  echo "  style:    Code style changes (formatting, semicolons, etc)"
  echo "  refactor: Code change that neither fixes a bug nor adds a feature"
  echo "  perf:     Performance improvements"
  echo "  test:     Adding or updating tests"
  echo "  build:    Changes to build system or dependencies"
  echo "  ci:       Changes to CI configuration files and scripts"
  echo "  chore:    Other changes that don't modify src or test files"
  echo "  revert:   Reverts a previous commit"
  echo ""
  echo "Examples:"
  echo "  ‚úÖ feat: add user authentication"
  echo "  ‚úÖ fix(api): resolve pokemon battle endpoint error"
  echo "  ‚úÖ docs: update README with setup instructions"
  echo "  ‚úÖ chore(deps): update dependencies"
  echo ""
  echo "Your commit message:"
  echo "  '$commit_msg'"
  echo ""
  exit 1
fi

echo "‚úÖ Commit message is valid!"

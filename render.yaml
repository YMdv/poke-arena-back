# =========================================
# üéÆ Pok√©Arena API - Render Deploy Config
# =========================================
#
# Este arquivo configura automaticamente todos os recursos necess√°rios na Render.
# A Render detecta este arquivo na raiz do reposit√≥rio e cria:
#   - Web Service (Backend NestJS)
#   - PostgreSQL Database
#   - Vari√°veis de ambiente conectadas automaticamente
#
# Como usar:
#   1. Fa√ßa commit deste arquivo: git add render.yaml && git commit -m "Add Render config"
#   2. Push para o GitHub: git push origin main
#   3. Na Render: Dashboard ‚Üí New ‚Üí Blueprint ‚Üí Conectar reposit√≥rio
#   4. Render detecta o render.yaml automaticamente e cria tudo com um clique!
#
# Documenta√ß√£o: https://render.com/docs/infrastructure-as-code
# =========================================

services:
  # =========================================
  # üöÄ Web Service (Backend API)
  # =========================================
  - type: web
    name: poke-arena-back
    runtime: node
    region: oregon  # us-west (mais barato) - alternativas: ohio (us-east), frankfurt (eu-central)
    plan: free  # Planos dispon√≠veis: free, starter, standard, pro

    # Root Directory: RAIZ do projeto (n√£o src/)
    # Isso resolve o erro: "Cannot find module '/opt/render/project/src/dist/main.js'"
    rootDir: .

    # Branch principal para auto-deploy
    branch: main

    # Build Command: instala depend√™ncias e compila TypeScript
    # --production=false: instala devDependencies (necess√°rio para @nestjs/cli)
    buildCommand: yarn install --production=false && yarn build

    # Start Command: roda migrations ANTES de iniciar a aplica√ß√£o
    # Garante que o banco est√° sempre atualizado antes do app iniciar
    startCommand: yarn start:prod:migrate

    # Health Check: endpoint que a Render monitora continuamente
    # Se falhar, reinicia automaticamente o servi√ßo
    healthCheckPath: /health

    # Auto-deploy: deploy autom√°tico quando h√° push na branch principal
    autoDeploy: true

    # =========================================
    # üîß Vari√°veis de Ambiente
    # =========================================
    envVars:
      # ---------------------------------------
      # Configura√ß√µes da Aplica√ß√£o
      # ---------------------------------------

      - key: NODE_ENV
        value: production

      - key: PORT
        value: 3000

      - key: API_PREFIX
        value: ""  # Vazio por padr√£o - pode configurar como "/api" se necess√°rio

      # ---------------------------------------
      # Configura√ß√µes do Banco de Dados
      # ---------------------------------------
      # A Render injeta automaticamente as credenciais do PostgreSQL criado abaixo
      # usando a sintaxe "fromDatabase". Isso significa:
      #   ‚úÖ Zero hardcode de senhas
      #   ‚úÖ Conex√£o segura autom√°tica
      #   ‚úÖ Credenciais gerenciadas pela Render

      - key: DATABASE_HOST
        fromDatabase:
          name: pokearena-db
          property: host

      - key: DATABASE_PORT
        fromDatabase:
          name: pokearena-db
          property: port

      - key: DATABASE_USER
        fromDatabase:
          name: pokearena-db
          property: user

      - key: DATABASE_PASSWORD
        fromDatabase:
          name: pokearena-db
          property: password

      - key: DATABASE_NAME
        fromDatabase:
          name: pokearena-db
          property: database

      # IMPORTANTE: DATABASE_SYNC deve ser FALSE em produ√ß√£o!
      # Use migrations (TypeORM) para gerenciar schema do banco
      - key: DATABASE_SYNC
        value: false

      # DATABASE_LOGGING: false em produ√ß√£o para melhor performance
      # Ative (true) apenas para debugging
      - key: DATABASE_LOGGING
        value: false

      # ---------------------------------------
      # Configura√ß√µes de Logging
      # ---------------------------------------

      - key: LOG_LEVEL
        value: info  # N√≠veis: debug, info, warn, error

      - key: LOG_FORMAT
        value: json  # Formato estruturado para an√°lise de logs

      # ---------------------------------------
      # Configura√ß√µes do Swagger
      # ---------------------------------------

      - key: SWAGGER_TITLE
        value: Pok√©Arena API

      - key: SWAGGER_DESCRIPTION
        value: API para gerenciamento de pok√©mons e batalhas

      - key: SWAGGER_VERSION
        value: 1.0.0

# =========================================
# üóÑÔ∏è PostgreSQL Database
# =========================================
databases:
  - name: pokearena-db
    databaseName: pokearena_db
    plan: free  # Planos: free (256MB), starter (1GB), standard (10GB), pro (50GB)
    region: oregon  # Mesma regi√£o do web service para menor lat√™ncia

    # A Render cria automaticamente:
    #   - Database com nome "pokearena_db"
    #   - Usu√°rio com permiss√µes completas
    #   - Senha segura gerada automaticamente
    #   - Todas as credenciais s√£o injetadas no web service via "fromDatabase"

# =========================================
# üìù Notas Importantes
# =========================================
#
# 1. PRIMEIRO DEPLOY:
#    - As migrations rodar√£o automaticamente via "yarn start:prod:migrate"
#    - Se houver erro nas migrations, o deploy falhar√° (comportamento esperado)
#    - Verifique os logs: Dashboard ‚Üí seu servi√ßo ‚Üí Logs
#
# 2. VARI√ÅVEIS ADICIONAIS (se necess√°rio):
#    - JWT_SECRET: adicione manualmente no Dashboard (Environment ‚Üí Add Environment Variable)
#    - API keys externas: adicione manualmente por seguran√ßa
#    - Nunca commite secrets no render.yaml!
#
# 3. DOM√çNIO CUSTOMIZADO:
#    - Por padr√£o: poke-arena-back.onrender.com
#    - Para dom√≠nio pr√≥prio: Dashboard ‚Üí Settings ‚Üí Custom Domain
#
# 4. MONITORING:
#    - Logs: Dashboard ‚Üí seu servi√ßo ‚Üí Logs (live streaming)
#    - Metrics: Dashboard ‚Üí seu servi√ßo ‚Üí Metrics (CPU, mem√≥ria, requests)
#    - Alerts: Configure notifica√ß√µes em Dashboard ‚Üí Notifications
#
# 5. SCALING:
#    - Free plan: 1 inst√¢ncia (dorme ap√≥s 15 min de inatividade)
#    - Starter+: m√∫ltiplas inst√¢ncias, auto-scaling, zero downtime deploys
#
# 6. DATABASE BACKUPS:
#    - Free plan: sem backups autom√°ticos
#    - Starter+: backups di√°rios autom√°ticos com reten√ß√£o de 7 dias
#    - Recomenda√ß√£o: fa√ßa backups manuais peri√≥dicos do free tier
#
# 7. TROUBLESHOOTING:
#    - Erro "Cannot find module": verifique se rootDir est√° correto (deve ser ".")
#    - Erro de conex√£o DB: verifique se o database foi criado antes do web service
#    - App n√£o inicia: verifique logs para erros de migration ou startup
#
# 8. CUSTOS:
#    - Free tier: $0/m√™s (web service + database)
#    - Limita√ß√µes: dorme ap√≥s inatividade, 750h/m√™s, sem SSL customizado
#    - Starter: $7/m√™s (web) + $7/m√™s (db) = $14/m√™s total
#
# =========================================
# üöÄ Deploy Flow
# =========================================
#
# 1. git push origin main
#    ‚Üì
# 2. Render detecta mudan√ßa
#    ‚Üì
# 3. Build: yarn install && yarn build
#    ‚Üì
# 4. Start: yarn start:prod:migrate
#    ‚îú‚îÄ‚îÄ Roda migrations (yarn migration:run)
#    ‚îî‚îÄ‚îÄ Inicia app (node dist/main.js)
#    ‚Üì
# 5. Health check: GET /health
#    ‚Üì
# 6. Deploy completo! üéâ
#
# =========================================
